// <auto-generated />
using System;
using ApplicationRegistry.Database;
using ApplicationRegistry.Database.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApplicationRegistry.Web.Migrations
{
    [DbContext(typeof(ApplicationRegistryDatabaseContext))]
    [Migration("20190219211705_Task_IdApplication")]
    partial class Task_IdApplication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuildProcessUrls");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<Guid>("IdProject");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Owner");

                    b.Property<string>("RepositoryUrl");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IdProject");

                    b.ToTable("Application");

                    b.HasData(
                        new { Id = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), Code = "Employees", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Application that stores list of all employees", IdProject = new Guid("375d4e9f-921c-4659-9ee2-d8e86eb75f4a"), Name = "Employees" },
                        new { Id = new Guid("63f4f9c6-caa5-44dc-8c78-5f6e4c01df3c"), Code = "EmailService", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Abstraction over our SMTP server that introduces security and accounting", IdProject = new Guid("375d4e9f-921c-4659-9ee2-d8e86eb75f4a"), Name = "EmailService" },
                        new { Id = new Guid("6cc102a4-8d86-4922-8402-d205426a4e63"), Code = "BankConnector", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Connector to bank that is responsible for acount services", IdProject = new Guid("375d4e9f-921c-4659-9ee2-d8e86eb75f4a"), Name = "BankConnector" },
                        new { Id = new Guid("e09c25df-0bb9-400c-bb53-2fe134f97630"), Code = "Invoices", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Handling incomming and outgoing invoices. Hear of accounting system", IdProject = new Guid("9082ce90-a689-48fc-8070-b67fa3b2b446"), Name = "Invoices" },
                        new { Id = new Guid("939984ab-4122-4572-a760-ee13ee991c64"), Code = "BankTransfers", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Fetch transfers from the Bank", IdProject = new Guid("375d4e9f-921c-4659-9ee2-d8e86eb75f4a"), Name = "BankTransfers" },
                        new { Id = new Guid("5f2df207-8bfc-402b-a9a9-35d75aaf9eb2"), Code = "Salaries", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Stores list of salaries. Have possibility to order transfer in Bank", IdProject = new Guid("0e6a3923-6fb2-4274-8076-0d8b9a3c8b29"), Name = "Salaries" },
                        new { Id = new Guid("1fcd899a-cc9b-4a99-af35-b3a772878ed8"), Code = "Holidays", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Stores evidention of holidays", IdProject = new Guid("0e6a3923-6fb2-4274-8076-0d8b9a3c8b29"), Name = "Holidays" },
                        new { Id = new Guid("b9af71b5-fa2d-48a0-8324-13403f0778ce"), Code = "SickLeave", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Stores evidention of sick leaves", IdProject = new Guid("0e6a3923-6fb2-4274-8076-0d8b9a3c8b29"), Name = "SickLeave" },
                        new { Id = new Guid("31695e16-b600-4d3a-ab49-36bc2c11e94f"), Code = "AccountingSystem.UI", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Stores evidention of sick leaves", IdProject = new Guid("9082ce90-a689-48fc-8070-b67fa3b2b446"), Name = "AccountingSystem.UI" },
                        new { Id = new Guid("3309a157-e24f-4286-a368-df84719ad065"), Code = "HRSystem.UI", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), Description = "Stores evidention of sick leaves", IdProject = new Guid("0e6a3923-6fb2-4274-8076-0d8b9a3c8b29"), Name = "HRSystem.UI" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionDependencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ExtraProperties");

                    b.Property<Guid>("IdApplicationVersion");

                    b.Property<string>("IdDependency")
                        .IsRequired();

                    b.Property<string>("IdDependencyVersion");

                    b.Property<Guid?>("IdParent");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IdApplicationVersion");

                    b.HasIndex("IdDependency");

                    b.HasIndex("IdDependencyVersion");

                    b.ToTable("ApplicationVersionDependency");

                    b.HasData(
                        new { Id = new Guid("00d158a6-475f-4490-96a9-20df007a16e1"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("cbf23271-490f-4035-ace0-1c6f8fbcc00c"), IdDependency = "APPLICATION:6cc102a4-8d86-4922-8402-d205426a4e63" },
                        new { Id = new Guid("91eda6ab-b3bf-4a49-afca-e284945803de"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("8d621a2c-e8bb-462e-9a18-f82b37290f47"), IdDependency = "APPLICATION:ea1f66cb-fbc0-42e6-8021-fb424020f15f" },
                        new { Id = new Guid("b024122c-7c57-4527-936e-06084d8d9405"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("e921b760-86cd-4486-9a30-7ef93b249dac"), IdDependency = "APPLICATION:ea1f66cb-fbc0-42e6-8021-fb424020f15f" },
                        new { Id = new Guid("e1bf87df-9688-4469-a3a2-594d573344f7"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("cb11d6c5-6bbe-4b52-a08b-c80465216eca"), IdDependency = "APPLICATION:ea1f66cb-fbc0-42e6-8021-fb424020f15f" },
                        new { Id = new Guid("053a5194-e346-472c-9ac0-82956d9e9218"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("d214213e-48dd-4129-be36-03d7eee08d40"), IdDependency = "APPLICATION:ea1f66cb-fbc0-42e6-8021-fb424020f15f" },
                        new { Id = new Guid("cbab383c-e611-4c01-bec1-537d1fd90c31"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("d214213e-48dd-4129-be36-03d7eee08d40"), IdDependency = "APPLICATION:63f4f9c6-caa5-44dc-8c78-5f6e4c01df3c" },
                        new { Id = new Guid("5283254b-e16f-4729-96eb-7df7b0a8f7c7"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("d214213e-48dd-4129-be36-03d7eee08d40"), IdDependency = "APPLICATION:6cc102a4-8d86-4922-8402-d205426a4e63" },
                        new { Id = new Guid("38570e7f-f072-4a03-9cc0-9354d19eb335"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("d214213e-48dd-4129-be36-03d7eee08d40"), IdDependency = "APPLICATION:e09c25df-0bb9-400c-bb53-2fe134f97630" },
                        new { Id = new Guid("cfd0cf31-ba45-4844-a912-63bfaadf8f61"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("d214213e-48dd-4129-be36-03d7eee08d40"), IdDependency = "APPLICATION:939984ab-4122-4572-a760-ee13ee991c64" },
                        new { Id = new Guid("eda7c04a-f0e0-4005-81e3-905be6341287"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:ea1f66cb-fbc0-42e6-8021-fb424020f15f" },
                        new { Id = new Guid("2f370832-a4e8-48c4-a0d1-535dfa81ff25"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:63f4f9c6-caa5-44dc-8c78-5f6e4c01df3c" },
                        new { Id = new Guid("a8de6f6d-956f-4cd9-9aa9-e2080cb7dccc"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:6cc102a4-8d86-4922-8402-d205426a4e63" },
                        new { Id = new Guid("48e78d4d-0061-4461-be10-ab16089ed24f"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:939984ab-4122-4572-a760-ee13ee991c64" },
                        new { Id = new Guid("99a4855b-4986-408e-80e8-e0ef89564703"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:5f2df207-8bfc-402b-a9a9-35d75aaf9eb2" },
                        new { Id = new Guid("c9e4ede5-d650-41d8-9820-908a3a35475f"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:b9af71b5-fa2d-48a0-8324-13403f0778ce" },
                        new { Id = new Guid("7ce8b1ed-a2ba-47d1-90bd-0c3bd88fd9be"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), IdDependency = "APPLICATION:1fcd899a-cc9b-4a99-af35-b3a772878ed8" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("IdApplication");

                    b.Property<string>("IdCommit");

                    b.Property<string>("IdEnvironment")
                        .IsRequired();

                    b.Property<bool>("IsArchived");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("ValidationStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Version")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdApplication");

                    b.HasIndex("IdEnvironment");

                    b.ToTable("ApplicationVersion");

                    b.HasData(
                        new { Id = new Guid("90ca2c95-8ef4-44f0-9ad7-d22b776b17c4"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 51, DateTimeKind.Local), IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), IdEnvironment = "INT", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("0f40d8ff-2a04-404f-8bca-2db216792a6c"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), IdEnvironment = "INT", IsArchived = true, ValidationStatus = 0, Version = "1.0_12345" },
                        new { Id = new Guid("9d934147-04fd-4673-abad-1ab4a4dcb093"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), IdEnvironment = "UAT", IsArchived = false, ValidationStatus = 0, Version = "1.0_12345" },
                        new { Id = new Guid("7af4354b-111e-4b43-9260-3a831e1e5b02"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), IdEnvironment = "QUA", IsArchived = false, ValidationStatus = 0, Version = "1.0_12345" },
                        new { Id = new Guid("eef41169-5cbe-43c5-bd54-dae3de598ef0"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.0_12345" },
                        new { Id = new Guid("845d57bc-141f-400b-b58f-ce0dbc134f24"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("63f4f9c6-caa5-44dc-8c78-5f6e4c01df3c"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("1da76784-dfb3-4baf-a720-fca345f3f192"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("e09c25df-0bb9-400c-bb53-2fe134f97630"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("cbf23271-490f-4035-ace0-1c6f8fbcc00c"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("939984ab-4122-4572-a760-ee13ee991c64"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("8d621a2c-e8bb-462e-9a18-f82b37290f47"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("5f2df207-8bfc-402b-a9a9-35d75aaf9eb2"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("1915a3ed-0711-4e6a-b9a6-3acc1fe26d6b"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("6cc102a4-8d86-4922-8402-d205426a4e63"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("e921b760-86cd-4486-9a30-7ef93b249dac"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("1fcd899a-cc9b-4a99-af35-b3a772878ed8"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("cb11d6c5-6bbe-4b52-a08b-c80465216eca"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("b9af71b5-fa2d-48a0-8324-13403f0778ce"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("d214213e-48dd-4129-be36-03d7eee08d40"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("31695e16-b600-4d3a-ab49-36bc2c11e94f"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("00d8eda4-b8df-4aa3-8225-392a6d78f98e"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("3309a157-e24f-4286-a368-df84719ad065"), IdEnvironment = "PRD", IsArchived = false, ValidationStatus = 0, Version = "1.1_12332" },
                        new { Id = new Guid("d72dbce5-81c7-4b00-8196-a99733f579a2"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f"), IdEnvironment = "Analytics", IsArchived = false, ValidationStatus = 0, Version = "RODO" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("IdApplicationVersion");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SpecificationTextHash")
                        .IsRequired();

                    b.Property<string>("SpecificationType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdApplicationVersion");

                    b.HasIndex("SpecificationType");

                    b.ToTable("ApplicationVersionSpecification");

                    b.HasDiscriminator<string>("SpecificationType").HasValue("ApplicationVersionSpecificationEntity");

                    b.HasData(
                        new { Id = new Guid("ffe22dae-443d-4afd-8cae-dca4f1f7883b"), Code = "7c851e98-36b2-4334-b0da-b63550c106ae", ContentType = "application/yaml", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 54, DateTimeKind.Local), IdApplicationVersion = new Guid("90ca2c95-8ef4-44f0-9ad7-d22b776b17c4"), SpecificationTextHash = "7b1891ff924a8d6ea471565c8dc2b8179d6659435edcf18fa446742a823f460f", SpecificationType = "Swagger" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationTextEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Specification");

                    b.HasKey("Id");

                    b.ToTable("ApplicationVersionSpecificationText");

                    b.HasData(
                        new { Id = new Guid("ffe22dae-443d-4afd-8cae-dca4f1f7883b"), CreateDate = new DateTime(2019, 2, 19, 21, 17, 5, 63, DateTimeKind.Utc), Specification = @"swagger: ""2.0""
info:
  description: ""This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.""
  version: ""1.0.0""
  title: ""Swagger Petstore""
  termsOfService: ""http://swagger.io/terms/""
  contact:
    email: ""apiteam@swagger.io""
  license:
    name: ""Apache 2.0""
    url: ""http://www.apache.org/licenses/LICENSE-2.0.html""
host: ""petstore.swagger.io""
basePath: ""/v2""
tags:
- name: ""pet""
  description: ""Everything about your Pets""
  externalDocs:
    description: ""Find out more""
    url: ""http://swagger.io""
- name: ""store""
  description: ""Access to Petstore orders""
- name: ""user""
  description: ""Operations about user""
  externalDocs:
    description: ""Find out more about our store""
    url: ""http://swagger.io""
schemes:
- ""https""
- ""http""
paths:
  /pet:
    post:
      tags:
      - ""pet""
      summary: ""Add a new pet to the store""
      description: """"
      operationId: ""addPet""
      consumes:
      - ""application/json""
      - ""application/xml""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - in: ""body""
        name: ""body""
        description: ""Pet object that needs to be added to the store""
        required: true
        schema:
          $ref: ""#/definitions/Pet""
      responses:
        405:
          description: ""Invalid input""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
    put:
      tags:
      - ""pet""
      summary: ""Update an existing pet""
      description: """"
      operationId: ""updatePet""
      consumes:
      - ""application/json""
      - ""application/xml""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - in: ""body""
        name: ""body""
        description: ""Pet object that needs to be added to the store""
        required: true
        schema:
          $ref: ""#/definitions/Pet""
      responses:
        400:
          description: ""Invalid ID supplied""
        404:
          description: ""Pet not found""
        405:
          description: ""Validation exception""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
  /pet/findByStatus:
    get:
      tags:
      - ""pet""
      summary: ""Finds Pets by status""
      description: ""Multiple status values can be provided with comma separated strings""
      operationId: ""findPetsByStatus""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""status""
        in: ""query""
        description: ""Status values that need to be considered for filter""
        required: true
        type: ""array""
        items:
          type: ""string""
          enum:
          - ""available""
          - ""pending""
          - ""sold""
          default: ""available""
        collectionFormat: ""multi""
      responses:
        200:
          description: ""successful operation""
          schema:
            type: ""array""
            items:
              $ref: ""#/definitions/Pet""
        400:
          description: ""Invalid status value""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
  /pet/findByTags:
    get:
      tags:
      - ""pet""
      summary: ""Finds Pets by tags""
      description: ""Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.""
      operationId: ""findPetsByTags""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""tags""
        in: ""query""
        description: ""Tags to filter by""
        required: true
        type: ""array""
        items:
          type: ""string""
        collectionFormat: ""multi""
      responses:
        200:
          description: ""successful operation""
          schema:
            type: ""array""
            items:
              $ref: ""#/definitions/Pet""
        400:
          description: ""Invalid tag value""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - ""pet""
      summary: ""Find pet by ID""
      description: ""Returns a single pet""
      operationId: ""getPetById""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""petId""
        in: ""path""
        description: ""ID of pet to return""
        required: true
        type: ""integer""
        format: ""int64""
      responses:
        200:
          description: ""successful operation""
          schema:
            $ref: ""#/definitions/Pet""
        400:
          description: ""Invalid ID supplied""
        404:
          description: ""Pet not found""
      security:
      - api_key: []
    post:
      tags:
      - ""pet""
      summary: ""Updates a pet in the store with form data""
      description: """"
      operationId: ""updatePetWithForm""
      consumes:
      - ""application/x-www-form-urlencoded""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""petId""
        in: ""path""
        description: ""ID of pet that needs to be updated""
        required: true
        type: ""integer""
        format: ""int64""
      - name: ""name""
        in: ""formData""
        description: ""Updated name of the pet""
        required: false
        type: ""string""
      - name: ""status""
        in: ""formData""
        description: ""Updated status of the pet""
        required: false
        type: ""string""
      responses:
        405:
          description: ""Invalid input""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
    delete:
      tags:
      - ""pet""
      summary: ""Deletes a pet""
      description: """"
      operationId: ""deletePet""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""api_key""
        in: ""header""
        required: false
        type: ""string""
      - name: ""petId""
        in: ""path""
        description: ""Pet id to delete""
        required: true
        type: ""integer""
        format: ""int64""
      responses:
        400:
          description: ""Invalid ID supplied""
        404:
          description: ""Pet not found""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
  /pet/{petId}/uploadImage:
    post:
      tags:
      - ""pet""
      summary: ""uploads an image""
      description: """"
      operationId: ""uploadFile""
      consumes:
      - ""multipart/form-data""
      produces:
      - ""application/json""
      parameters:
      - name: ""petId""
        in: ""path""
        description: ""ID of pet to update""
        required: true
        type: ""integer""
        format: ""int64""
      - name: ""additionalMetadata""
        in: ""formData""
        description: ""Additional data to pass to server""
        required: false
        type: ""string""
      - name: ""file""
        in: ""formData""
        description: ""file to upload""
        required: false
        type: ""file""
      responses:
        200:
          description: ""successful operation""
          schema:
            $ref: ""#/definitions/ApiResponse""
      security:
      - petstore_auth:
        - ""write:pets""
        - ""read:pets""
  /store/inventory:
    get:
      tags:
      - ""store""
      summary: ""Returns pet inventories by status""
      description: ""Returns a map of status codes to quantities""
      operationId: ""getInventory""
      produces:
      - ""application/json""
      parameters: []
      responses:
        200:
          description: ""successful operation""
          schema:
            type: ""object""
            additionalProperties:
              type: ""integer""
              format: ""int32""
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - ""store""
      summary: ""Place an order for a pet""
      description: """"
      operationId: ""placeOrder""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - in: ""body""
        name: ""body""
        description: ""order placed for purchasing the pet""
        required: true
        schema:
          $ref: ""#/definitions/Order""
      responses:
        200:
          description: ""successful operation""
          schema:
            $ref: ""#/definitions/Order""
        400:
          description: ""Invalid Order""
  /store/order/{orderId}:
    get:
      tags:
      - ""store""
      summary: ""Find purchase order by ID""
      description: ""For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions""
      operationId: ""getOrderById""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""orderId""
        in: ""path""
        description: ""ID of pet that needs to be fetched""
        required: true
        type: ""integer""
        maximum: 10.0
        minimum: 1.0
        format: ""int64""
      responses:
        200:
          description: ""successful operation""
          schema:
            $ref: ""#/definitions/Order""
        400:
          description: ""Invalid ID supplied""
        404:
          description: ""Order not found""
    delete:
      tags:
      - ""store""
      summary: ""Delete purchase order by ID""
      description: ""For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors""
      operationId: ""deleteOrder""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""orderId""
        in: ""path""
        description: ""ID of the order that needs to be deleted""
        required: true
        type: ""integer""
        minimum: 1.0
        format: ""int64""
      responses:
        400:
          description: ""Invalid ID supplied""
        404:
          description: ""Order not found""
  /user:
    post:
      tags:
      - ""user""
      summary: ""Create user""
      description: ""This can only be done by the logged in user.""
      operationId: ""createUser""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - in: ""body""
        name: ""body""
        description: ""Created user object""
        required: true
        schema:
          $ref: ""#/definitions/User""
      responses:
        default:
          description: ""successful operation""
  /user/createWithArray:
    post:
      tags:
      - ""user""
      summary: ""Creates list of users with given input array""
      description: """"
      operationId: ""createUsersWithArrayInput""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - in: ""body""
        name: ""body""
        description: ""List of user object""
        required: true
        schema:
          type: ""array""
          items:
            $ref: ""#/definitions/User""
      responses:
        default:
          description: ""successful operation""
  /user/createWithList:
    post:
      tags:
      - ""user""
      summary: ""Creates list of users with given input array""
      description: """"
      operationId: ""createUsersWithListInput""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - in: ""body""
        name: ""body""
        description: ""List of user object""
        required: true
        schema:
          type: ""array""
          items:
            $ref: ""#/definitions/User""
      responses:
        default:
          description: ""successful operation""
  /user/login:
    get:
      tags:
      - ""user""
      summary: ""Logs user into the system""
      description: """"
      operationId: ""loginUser""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""username""
        in: ""query""
        description: ""The user name for login""
        required: true
        type: ""string""
      - name: ""password""
        in: ""query""
        description: ""The password for login in clear text""
        required: true
        type: ""string""
      responses:
        200:
          description: ""successful operation""
          schema:
            type: ""string""
          headers:
            X-Rate-Limit:
              type: ""integer""
              format: ""int32""
              description: ""calls per hour allowed by the user""
            X-Expires-After:
              type: ""string""
              format: ""date-time""
              description: ""date in UTC when token expires""
        400:
          description: ""Invalid username/password supplied""
  /user/logout:
    get:
      tags:
      - ""user""
      summary: ""Logs out current logged in user session""
      description: """"
      operationId: ""logoutUser""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters: []
      responses:
        default:
          description: ""successful operation""
  /user/{username}:
    get:
      tags:
      - ""user""
      summary: ""Get user by user name""
      description: """"
      operationId: ""getUserByName""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""username""
        in: ""path""
        description: ""The name that needs to be fetched. Use user1 for testing. ""
        required: true
        type: ""string""
      responses:
        200:
          description: ""successful operation""
          schema:
            $ref: ""#/definitions/User""
        400:
          description: ""Invalid username supplied""
        404:
          description: ""User not found""
    put:
      tags:
      - ""user""
      summary: ""Updated user""
      description: ""This can only be done by the logged in user.""
      operationId: ""updateUser""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""username""
        in: ""path""
        description: ""name that need to be updated""
        required: true
        type: ""string""
      - in: ""body""
        name: ""body""
        description: ""Updated user object""
        required: true
        schema:
          $ref: ""#/definitions/User""
      responses:
        400:
          description: ""Invalid user supplied""
        404:
          description: ""User not found""
    delete:
      tags:
      - ""user""
      summary: ""Delete user""
      description: ""This can only be done by the logged in user.""
      operationId: ""deleteUser""
      produces:
      - ""application/xml""
      - ""application/json""
      parameters:
      - name: ""username""
        in: ""path""
        description: ""The name that needs to be deleted""
        required: true
        type: ""string""
      responses:
        400:
          description: ""Invalid username supplied""
        404:
          description: ""User not found""
securityDefinitions:
  petstore_auth:
    type: ""oauth2""
    authorizationUrl: ""http://petstore.swagger.io/oauth/dialog""
    flow: ""implicit""
    scopes:
      write:pets: ""modify pets in your account""
      read:pets: ""read your pets""
  api_key:
    type: ""apiKey""
    name: ""api_key""
    in: ""header""
definitions:
  Order:
    type: ""object""
    properties:
      id:
        type: ""integer""
        format: ""int64""
      petId:
        type: ""integer""
        format: ""int64""
      quantity:
        type: ""integer""
        format: ""int32""
      shipDate:
        type: ""string""
        format: ""date-time""
      status:
        type: ""string""
        description: ""Order Status""
        enum:
        - ""placed""
        - ""approved""
        - ""delivered""
      complete:
        type: ""boolean""
        default: false
    xml:
      name: ""Order""
  Category:
    type: ""object""
    properties:
      id:
        type: ""integer""
        format: ""int64""
      name:
        type: ""string""
    xml:
      name: ""Category""
  User:
    type: ""object""
    properties:
      id:
        type: ""integer""
        format: ""int64""
      username:
        type: ""string""
      firstName:
        type: ""string""
      lastName:
        type: ""string""
      email:
        type: ""string""
      password:
        type: ""string""
      phone:
        type: ""string""
      userStatus:
        type: ""integer""
        format: ""int32""
        description: ""User Status""
    xml:
      name: ""User""
  Tag:
    type: ""object""
    properties:
      id:
        type: ""integer""
        format: ""int64""
      name:
        type: ""string""
    xml:
      name: ""Tag""
  Pet:
    type: ""object""
    required:
    - ""name""
    - ""photoUrls""
    properties:
      id:
        type: ""integer""
        format: ""int64""
      category:
        $ref: ""#/definitions/Category""
      name:
        type: ""string""
        example: ""doggie""
      photoUrls:
        type: ""array""
        xml:
          name: ""photoUrl""
          wrapped: true
        items:
          type: ""string""
      tags:
        type: ""array""
        xml:
          name: ""tag""
          wrapped: true
        items:
          $ref: ""#/definitions/Tag""
      status:
        type: ""string""
        description: ""pet status in the store""
        enum:
        - ""available""
        - ""pending""
        - ""sold""
    xml:
      name: ""Pet""
  ApiResponse:
    type: ""object""
    properties:
      code:
        type: ""integer""
        format: ""int32""
      type:
        type: ""string""
      message:
        type: ""string""
externalDocs:
  description: ""Find out more about Swagger""
  url: ""http://swagger.io""" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.CollectorKnowledgeBaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientType");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("IdApplicationClient");

                    b.Property<Guid>("IdApplicationServer");

                    b.Property<Guid>("IdApplicationVersionDependencyChild");

                    b.Property<Guid>("IdApplicationVersionDependencyParent");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("CollectorKnowledgeBase");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.DependencyEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ExtraProperties");

                    b.Property<string>("IdDependencyType")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("IdDependencyType");

                    b.ToTable("Dependency");

                    b.HasDiscriminator<string>("IdDependencyType").HasValue("NUGET");

                    b.HasData(
                        new { Id = "NUGET:System", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdDependencyType = "NUGET", Name = "System" },
                        new { Id = "NUGET:Microsoft.Extensions.Logging", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdDependencyType = "NUGET", Name = "Microsoft.Extensions.Logging" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.DependencyTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanBeAddedManualy");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DependencyType");

                    b.HasData(
                        new { Id = "NUGET", CanBeAddedManualy = false, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 38, DateTimeKind.Local), Name = "Nuget" },
                        new { Id = "APPLICATION", CanBeAddedManualy = true, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 40, DateTimeKind.Local), Name = "Application" },
                        new { Id = "EXTERNALAPPLICATION", CanBeAddedManualy = false, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 41, DateTimeKind.Local), Name = "External Application" },
                        new { Id = "FRAMEWORK", CanBeAddedManualy = false, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 41, DateTimeKind.Local), Name = "Framework" },
                        new { Id = "NPM", CanBeAddedManualy = false, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 41, DateTimeKind.Local), Name = "npm" },
                        new { Id = "DATABASE", CanBeAddedManualy = false, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 41, DateTimeKind.Local), Name = "Database" },
                        new { Id = "AUTORESTCLIENT", CanBeAddedManualy = false, CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 41, DateTimeKind.Local), Name = "AutoRest Client" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.DependencyVersionEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("DependencyId");

                    b.Property<string>("IdDependency")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("ValidationStatus");

                    b.Property<string>("Version")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("DependencyVersion");

                    b.HasData(
                        new { Id = "19e6ad75-997d-4eff-8e9f-8a0c8e73a047", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 52, DateTimeKind.Local), IdDependency = "NUGET:System", ValidationStatus = 0, Version = "2.1.0" },
                        new { Id = "d413b105-80fc-49a1-997e-94503e465494", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependency = "NUGET:Microsoft.Extensions.Logging", ValidationStatus = 0, Version = "1.1.4" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.EnvironmentEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Environment");

                    b.HasData(
                        new { Id = "INT", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Name = "INT" },
                        new { Id = "UAT", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Name = "UAT" },
                        new { Id = "QUA", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Name = "QUA" },
                        new { Id = "PRD", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Name = "PRD" },
                        new { Id = "Analytics", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Name = "Analytics" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new { Id = new Guid("00000000-0000-0000-0000-000000000001"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 41, DateTimeKind.Local), Description = "Project for applications generated by CLI", Name = "Unasigned applications" },
                        new { Id = new Guid("375d4e9f-921c-4659-9ee2-d8e86eb75f4a"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Description = "Common / infrastructural services shared by other service", Name = "Shared Services" },
                        new { Id = new Guid("9082ce90-a689-48fc-8070-b67fa3b2b446"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Description = "System used by accountants", Name = "Accounting system" },
                        new { Id = new Guid("0e6a3923-6fb2-4274-8076-0d8b9a3c8b29"), CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 50, DateTimeKind.Local), Description = "System that is used for HR related topics", Name = "HR system" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.SpecificationTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("SpecificationTypes");

                    b.HasData(
                        new { Id = "Swagger", CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Swagger" }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.SwaggerSpecificationOperationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("HttpMethod");

                    b.Property<Guid>("IdApplicationVersionSpecification");

                    b.Property<string>("OperationId");

                    b.Property<string>("Path");

                    b.Property<byte[]>("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("IdApplicationVersionSpecification");

                    b.ToTable("SwaggerSpecificationOperation");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.Property<int>("TaskType");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Task");

                    b.HasDiscriminator<int>("TaskType");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.SwaggerApplicationVersionSpecificationEntity", b =>
                {
                    b.HasBaseType("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationEntity");

                    b.Property<string>("OperationsStringified");

                    b.ToTable("ApplicationVersionSpecification");

                    b.HasDiscriminator().HasValue("Swagger");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationDependencyEntity", b =>
                {
                    b.HasBaseType("ApplicationRegistry.Database.Entities.DependencyEntity");

                    b.Property<Guid>("IdApplication");

                    b.ToTable("Dependency");

                    b.HasDiscriminator().HasValue("APPLICATION");

                    b.HasData(
                        new { Id = "APPLICATION:ea1f66cb-fbc0-42e6-8021-fb424020f15f", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "Employees", IdApplication = new Guid("ea1f66cb-fbc0-42e6-8021-fb424020f15f") },
                        new { Id = "APPLICATION:63f4f9c6-caa5-44dc-8c78-5f6e4c01df3c", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "EmailService", IdApplication = new Guid("63f4f9c6-caa5-44dc-8c78-5f6e4c01df3c") },
                        new { Id = "APPLICATION:6cc102a4-8d86-4922-8402-d205426a4e63", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "BankConnector", IdApplication = new Guid("6cc102a4-8d86-4922-8402-d205426a4e63") },
                        new { Id = "APPLICATION:e09c25df-0bb9-400c-bb53-2fe134f97630", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "Invoices", IdApplication = new Guid("e09c25df-0bb9-400c-bb53-2fe134f97630") },
                        new { Id = "APPLICATION:939984ab-4122-4572-a760-ee13ee991c64", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "BankTransfers", IdApplication = new Guid("939984ab-4122-4572-a760-ee13ee991c64") },
                        new { Id = "APPLICATION:5f2df207-8bfc-402b-a9a9-35d75aaf9eb2", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "Salaries", IdApplication = new Guid("5f2df207-8bfc-402b-a9a9-35d75aaf9eb2") },
                        new { Id = "APPLICATION:1fcd899a-cc9b-4a99-af35-b3a772878ed8", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "Holidays", IdApplication = new Guid("1fcd899a-cc9b-4a99-af35-b3a772878ed8") },
                        new { Id = "APPLICATION:b9af71b5-fa2d-48a0-8324-13403f0778ce", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "SickLeave", IdApplication = new Guid("b9af71b5-fa2d-48a0-8324-13403f0778ce") },
                        new { Id = "APPLICATION:31695e16-b600-4d3a-ab49-36bc2c11e94f", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "AccountingSystem.UI", IdApplication = new Guid("31695e16-b600-4d3a-ab49-36bc2c11e94f") },
                        new { Id = "APPLICATION:3309a157-e24f-4286-a368-df84719ad065", CreateDate = new DateTime(2019, 2, 19, 22, 17, 5, 53, DateTimeKind.Local), IdDependencyType = "APPLICATION", Name = "HRSystem.UI", IdApplication = new Guid("3309a157-e24f-4286-a368-df84719ad065") }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.AutorestClientDependency", b =>
                {
                    b.HasBaseType("ApplicationRegistry.Database.Entities.DependencyEntity");


                    b.ToTable("Dependency");

                    b.HasDiscriminator().HasValue("AUTORESTCLIENT");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.MapAutorestClientTaskEntity", b =>
                {
                    b.HasBaseType("ApplicationRegistry.Database.Entities.TaskEntity");

                    b.Property<Guid>("IdApplication");

                    b.Property<Guid>("IdApplicationVersionDependency");

                    b.ToTable("Task");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new { Id = new Guid("e2bea464-d1ca-4351-8f3d-35f79697721f"), CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Desc1", Status = 0, TaskType = 0, Title = "Task1", IdApplication = new Guid("00000000-0000-0000-0000-000000000000"), IdApplicationVersionDependency = new Guid("61372c63-f943-4d67-8c7a-b8f374d1ce9d") }
                    );
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.ProjectEntity", "Project")
                        .WithMany("Applications")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionDependencyEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.ApplicationVersionEntity", "ApplicationVersion")
                        .WithMany("Dependencies")
                        .HasForeignKey("IdApplicationVersion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationRegistry.Database.Entities.DependencyEntity", "Dependency")
                        .WithMany()
                        .HasForeignKey("IdDependency")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationRegistry.Database.Entities.DependencyVersionEntity", "DependencyVersion")
                        .WithMany()
                        .HasForeignKey("IdDependencyVersion");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.ApplicationEntity", "Application")
                        .WithMany("Versions")
                        .HasForeignKey("IdApplication")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationRegistry.Database.Entities.EnvironmentEntity", "Environment")
                        .WithMany()
                        .HasForeignKey("IdEnvironment")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.ApplicationVersionEntity", "ApplicationVersion")
                        .WithMany("Specifications")
                        .HasForeignKey("IdApplicationVersion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationRegistry.Database.Entities.SpecificationTypeEntity")
                        .WithMany()
                        .HasForeignKey("SpecificationType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationTextEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationEntity")
                        .WithOne("SpecificationText")
                        .HasForeignKey("ApplicationRegistry.Database.Entities.ApplicationVersionSpecificationTextEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.DependencyEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.DependencyTypeEntity", "DependencyType")
                        .WithMany("Dependencies")
                        .HasForeignKey("IdDependencyType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.DependencyVersionEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.DependencyEntity", "Dependency")
                        .WithMany("Versions")
                        .HasForeignKey("DependencyId");
                });

            modelBuilder.Entity("ApplicationRegistry.Database.Entities.SwaggerSpecificationOperationEntity", b =>
                {
                    b.HasOne("ApplicationRegistry.Database.Entities.SwaggerApplicationVersionSpecificationEntity", "Specification")
                        .WithMany()
                        .HasForeignKey("IdApplicationVersionSpecification")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
